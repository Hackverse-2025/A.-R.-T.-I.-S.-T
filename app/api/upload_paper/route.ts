import { type NextRequest, NextResponse } from "next/server"
import { writeFile } from "fs/promises"
import { join } from "path"
import { v4 as uuidv4 } from "uuid"
import { mkdir } from "fs/promises"

// This is a server action that handles file uploads
export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData()
    const file = formData.get("file") as File

    if (!file) {
      return NextResponse.json({ error: "No file uploaded" }, { status: 400 })
    }

    // Create uploads directory if it doesn't exist
    const uploadsDir = join(process.cwd(), "uploads")
    try {
      await mkdir(uploadsDir, { recursive: true })
    } catch (error) {
      console.error("Error creating uploads directory:", error)
    }

    // Generate a unique filename
    const fileId = uuidv4()
    const fileExtension = file.name.split(".").pop()
    const fileName = `${fileId}.${fileExtension}`
    const filePath = join(uploadsDir, fileName)

    // Convert the file to a Buffer and save it
    const bytes = await file.arrayBuffer()
    const buffer = Buffer.from(bytes)
    await writeFile(filePath, buffer)

    // In a real app, you would call your Python backend here
    // For now, we'll simulate the response

    // Simulate extracting text from PDF
    const paperContent =
      "This is simulated paper content extracted from the PDF. In a real implementation, this would be the actual text extracted from the uploaded PDF file using a library like PyMuPDF."

    // Simulate generating a summary
    const summary =
      "This is a simulated summary of the paper. In a real implementation, this would be generated by calling the Cerebras API with the extracted paper content."

    return NextResponse.json({
      file_id: fileId,
      paper_content: paperContent,
      summary: summary,
      filename: file.name,
    })
  } catch (error) {
    console.error("Error handling file upload:", error)
    return NextResponse.json({ error: "Error uploading file" }, { status: 500 })
  }
}

